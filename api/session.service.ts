/**
 * Cactacea backend API
 * Cactacea / Cactacea backend API for web and mobile applications
 *
 * OpenAPI spec version: 19.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CactaceaErrors } from '../model/cactaceaErrors';
import { Channel } from '../model/channel';
import { FriendRequest } from '../model/friendRequest';
import { Invitation } from '../model/invitation';
import { PostSessionBody } from '../model/postSessionBody';
import { PostSocialLinkBody } from '../model/postSocialLinkBody';
import { PutPasswordBody } from '../model/putPasswordBody';
import { PutSessionProfileBody } from '../model/putSessionProfileBody';
import { PutSessionProfileImageBody } from '../model/putSessionProfileImageBody';
import { PutUserNameBody } from '../model/putUserNameBody';
import { Tweet } from '../model/tweet';
import { User } from '../model/user';
import { UserNameNotExists } from '../model/userNameNotExists';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SessionService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Remove the profile image
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProfileImage(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProfileImage(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProfileImage(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProfileImage(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/session/profile_image`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Confirm user name exist
     * 
     * @param userName User name.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public existUserName(userName: string, observe?: 'body', reportProgress?: boolean): Observable<UserNameNotExists>;
    public existUserName(userName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserNameNotExists>>;
    public existUserName(userName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserNameNotExists>>;
    public existUserName(userName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userName === null || userName === undefined) {
            throw new Error('Required parameter userName was null or undefined when calling existUserName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UserNameNotExists>(`${this.basePath}/session/username/${encodeURIComponent(String(userName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user information
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSession(observe?: 'body', reportProgress?: boolean): Observable<User>;
    public findSession(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public findSession(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public findSession(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/session`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get block users list
     * 
     * @param userName Filters users whose user name start of.
     * @param since Filters users which started on since or later.
     * @param offset The offset of users. By default the value is 0.
     * @param count Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionBlocks(userName?: string, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public findSessionBlocks(userName?: string, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public findSessionBlocks(userName?: string, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public findSessionBlocks(userName?: string, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/session/blocks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get channels list session user channelJoined
     * 
     * @param since Filters channels which started on since or later.
     * @param offset The offset of channels. By default the value is 0.
     * @param count Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionChannels(since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Channel>>;
    public findSessionChannels(since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Channel>>>;
    public findSessionChannels(since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Channel>>>;
    public findSessionChannels(since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Channel>>(`${this.basePath}/session/channels`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get users list session user is followed by
     * 
     * @param userName Filters users whose user name start of.
     * @param since Filters followers which started on since or later.
     * @param offset The offset of followers. By default the value is 0.
     * @param count Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionFollowers(userName?: string, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public findSessionFollowers(userName?: string, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public findSessionFollowers(userName?: string, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public findSessionFollowers(userName?: string, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/session/followers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get users list session user followed
     * 
     * @param userName Filters users whose user name start of.
     * @param since Filters follower which started on since or later.
     * @param offset The offset of follower. By default the value is 0.
     * @param count Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionFollows(userName?: string, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public findSessionFollows(userName?: string, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public findSessionFollows(userName?: string, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public findSessionFollows(userName?: string, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/session/follows`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get friend requests list session user created or received
     * 
     * @param received Filters friend requests which you have received or sent.
     * @param since Filters friend requests which started on since or later.
     * @param offset The offset of friend request. By default the value is 0.
     * @param count Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionFriendRequests(received: boolean, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<FriendRequest>>;
    public findSessionFriendRequests(received: boolean, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FriendRequest>>>;
    public findSessionFriendRequests(received: boolean, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FriendRequest>>>;
    public findSessionFriendRequests(received: boolean, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (received === null || received === undefined) {
            throw new Error('Required parameter received was null or undefined when calling findSessionFriendRequests.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (received !== undefined) {
            queryParameters = queryParameters.set('received', <any>received);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<FriendRequest>>(`${this.basePath}/session/requests`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get friends list
     * 
     * @param userName Filters friends which started on
     * @param since Filters friends which started on since or later.
     * @param offset The offset of friends. By default the value is 0.
     * @param count Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionFriends(userName?: string, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public findSessionFriends(userName?: string, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public findSessionFriends(userName?: string, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public findSessionFriends(userName?: string, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/session/friends`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get hidden channels list session user channelJoined
     * 
     * @param since Filters channels which started on since or later.
     * @param offset The offset of channels. By default the value is 0.
     * @param count Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionHiddenChannels(since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Channel>>;
    public findSessionHiddenChannels(since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Channel>>>;
    public findSessionHiddenChannels(since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Channel>>>;
    public findSessionHiddenChannels(since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Channel>>(`${this.basePath}/session/hides`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get invitations list session user received
     * 
     * @param since Filters invitations which started on since or later.
     * @param offset The offset of invitations. By default the value is 0.
     * @param count Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionInvitations(since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Invitation>>;
    public findSessionInvitations(since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Invitation>>>;
    public findSessionInvitations(since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Invitation>>>;
    public findSessionInvitations(since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Invitation>>(`${this.basePath}/session/invitations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get tweets list session user set a like
     * 
     * @param since Filters entries which started on since or later.
     * @param offset The offset of tweets. By default the value is 0.
     * @param count Maximum number of tweets returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionLikes(since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Tweet>>;
    public findSessionLikes(since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tweet>>>;
    public findSessionLikes(since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tweet>>>;
    public findSessionLikes(since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tweet>>(`${this.basePath}/session/likes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get users list session user muted
     * 
     * @param userName Filters users whose user name start of.
     * @param since Filters users which started on since or later.
     * @param offset The offset of users. By default the value is 0.
     * @param count Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionMutes(userName?: string, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public findSessionMutes(userName?: string, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public findSessionMutes(userName?: string, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public findSessionMutes(userName?: string, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/session/mutes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find session tweets
     * 
     * @param since Filters tweets which started on since or later.
     * @param offset The offset of tweets. By default the value is 0.
     * @param tweetPrivacyType Tweet privacy type.
     * @param tweetType Posted tweets or received tweets. By default the value is received.
     * @param count Maximum number of tweets returned on one result page. By default the value is 20 entries. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSessionTweets(since?: number, offset?: number, tweetPrivacyType?: string, tweetType?: string, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Tweet>>;
    public findSessionTweets(since?: number, offset?: number, tweetPrivacyType?: string, tweetType?: string, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tweet>>>;
    public findSessionTweets(since?: number, offset?: number, tweetPrivacyType?: string, tweetType?: string, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tweet>>>;
    public findSessionTweets(since?: number, offset?: number, tweetPrivacyType?: string, tweetType?: string, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (tweetPrivacyType !== undefined) {
            queryParameters = queryParameters.set('tweetPrivacyType', <any>tweetPrivacyType);
        }
        if (tweetType !== undefined) {
            queryParameters = queryParameters.set('tweetType', <any>tweetType);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tweet>>(`${this.basePath}/session/tweets`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find users
     * 
     * @param userName Filters users whose user name start of.
     * @param since Filters users which started on since or later.
     * @param offset The offset of users. By default the value is 0.
     * @param count Maximum number of users returned on one result page. By default the value is 20 users. The page size can never be larger than 50.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findUsers(userName?: string, since?: number, offset?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public findUsers(userName?: string, since?: number, offset?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public findUsers(userName?: string, since?: number, offset?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public findUsers(userName?: string, since?: number, offset?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (since !== undefined) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * link an social account
     * 
     * @param provider Provider type.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public linkSocialAccount(provider: string, body: PostSocialLinkBody, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public linkSocialAccount(provider: string, body: PostSocialLinkBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public linkSocialAccount(provider: string, body: PostSocialLinkBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public linkSocialAccount(provider: string, body: PostSocialLinkBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling linkSocialAccount.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling linkSocialAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/session/${encodeURIComponent(String(provider))}/link`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register user
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerSession(body: PostSessionBody, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public registerSession(body: PostSessionBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public registerSession(body: PostSessionBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public registerSession(body: PostSessionBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerSession.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/session`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sign out
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public signOut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public signOut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public signOut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public signOut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/session`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * unlink an social account
     * 
     * @param provider Provider type.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unlinkSocialAccount(provider: string, body: PostSocialLinkBody, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unlinkSocialAccount(provider: string, body: PostSocialLinkBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unlinkSocialAccount(provider: string, body: PostSocialLinkBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unlinkSocialAccount(provider: string, body: PostSocialLinkBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling unlinkSocialAccount.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling unlinkSocialAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/session/${encodeURIComponent(String(provider))}/link`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the password
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePassword(body: PutPasswordBody, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updatePassword(body: PutPasswordBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updatePassword(body: PutPasswordBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updatePassword(body: PutPasswordBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePassword.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/session/password`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the profile
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProfile(body: PutSessionProfileBody, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProfile(body: PutSessionProfileBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProfile(body: PutSessionProfileBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProfile(body: PutSessionProfileBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/session/profile`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the profile image
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProfileImage(body: PutSessionProfileImageBody, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProfileImage(body: PutSessionProfileImageBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProfileImage(body: PutSessionProfileImageBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProfileImage(body: PutSessionProfileImageBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateProfileImage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/session/profile_image`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the user name
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserName(body: PutUserNameBody, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUserName(body: PutUserNameBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUserName(body: PutUserNameBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUserName(body: PutUserNameBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUserName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/session/username`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
